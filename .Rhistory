coef_data <- tidy(model1, conf.int = TRUE)
dwplot(coef_data) +
theme_bw() +
ggtitle("Coefficient Plot of Category Effects on Profit") +
xlab("Coefficient Estimate") +
geom_vline(xintercept = 0, linetype = "dashed")
install.packages("margins")
library(margins)
#DotWhisker Plot for Categorical Variables
#Getting all coefficients including intercept
predictions <- margins::margins(model,
variables = "Category",
at = list(
Sales = mean(sales_data$Sales),
Quantity = mean(sales_data$Quantity),
Discount = mean(sales_data$Discount)
))
ggplot(predictions, aes(x = Category, y = estimate)) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2) +
theme_bw() +
ggtitle("Predicted Profit by Category") +
ylab("Predicted Profit")
#DotWhisker Plot for Categorical Variables
#Getting all coefficients including intercept
predictions <- margins::margins(model,
variables = "Category",
at = list(
Sales = mean(sales_data$Sales),
Quantity = mean(sales_data$Quantity),
Discount = mean(sales_data$Discount)
))
ggplot(predictions, aes(x = Category, y = Profit)) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2) +
theme_bw() +
ggtitle("Predicted Profit by Category") +
ylab("Predicted Profit")
#DotWhisker Plot for Categorical Variables
#Getting all coefficients including intercept
predictions <- margins::margins(model,
variables = "Category",
at = list(
Sales = mean(sales_data$Sales),
Quantity = mean(sales_data$Quantity),
Discount = mean(sales_data$Discount)
))
ggplot(predictions, aes(x = Category, y = Profit)) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2) +
theme_bw() +
ggtitle("Predicted Profit by Category") +
ylab("Predicted Profit")
#DotWhisker Plot for Categorical Variables
#Getting all coefficients including intercept
dwplot(model1,
vline = geom_vline(xintercept = 0, colour = "grey60", linetype = 2)) %>%
relabel_predictors(c("sales" = "Sales",
"discount" = "Discount",
"quantity" = "Quantity",
"categoryTechnology" = "Technology",
"categoryOfficeSupplies" = "Office Supplies")) %>%
theme_bw() +
xlab("Coefficient Estimate") +
ylab("") +
ggtitle("Effect on Profit by Category") +
theme(plot.title = element_text(face = "bold"),
legend.position = "bottom")
#DotWhisker Plot for Categorical Variables
#Getting all coefficients including intercept
dwplot(model1,
vline = geom_vline(xintercept = 0, colour = "grey60", linetype = 2)) %>%
relabel_predictors(c("sales" = "Sales",
"discount" = "Discount",
"quantity" = "Quantity",
"categoryTechnology" = "Technology",
"categoryOfficeSupplies" = "Office Supplies")) %>%
theme_bw() +
xlab("Coefficient Estimate") +
ylab("") +
ggtitle("Effect on Profit by Category") +
theme(plot.title = element_text(face = "bold"),
legend.position = "bottom")
#DotWhisker Plot for Categorical Variables
#Getting all coefficients including intercept
dwplot(model1,
vline = geom_vline(xintercept = 0, colour = "grey60", linetype = 2)) %>%
relabel_predictors(c("sales" = "Sales",
"discount" = "Discount",
"quantity" = "Quantity",
"categoryTechnology" = "Technology",
"categoryOfficeSupplies" = "Office Supplies")) %>%
#DotWhisker Plot for Categorical Variables
#Getting all coefficients including intercept
dwplot(model1,
vline = geom_vline(xintercept = 0, colour = "grey60", linetype = 2)) %>%
relabel_predictors(c("sales" = "Sales",
"discount" = "Discount",
"quantity" = "Quantity",
"categoryTechnology" = "Technology",
"categoryOfficeSupplies" = "Office Supplies"))
#DotWhisker Plot for Categorical Variables
#Getting all coefficients including intercept
dwplot(model1,
vline = geom_vline(xintercept = 0, colour = "grey50", linetype = 2)) +
labs(title = "Dot Whisker Plot of Model Coefficients",
subtitle = "Profit ~ Sales + Quantity + Discount + Category",
x = "Coefficient Estimate",
y = "Variables") +
theme_minimal() +
theme(plot.title = element_text(face = "bold"),
legend.position = "none")
#DotWhisker Plot for Categorical Variables
#Getting all coefficients including intercept
coef_data <- tidy(model1) %>%
mutate(term = case_when(
term == "(Intercept)" ~ "Furniture (Intercept)",
TRUE ~ term
))
#Plot
dwplot(coef_data,
vline = geom_vline(xintercept = 0, colour = "grey50", linetype = 2)) +
labs(title = "Dot Whisker Plot of Model Coefficients",
subtitle = "Profit ~ Sales + Quantity + Discount + Category",
x = "Coefficient Estimate",
y = "Variables") +
theme_minimal() +
theme(plot.title = element_text(face = "bold"),
legend.position = "none")
#Modeling the Data
model1 <- lm(Profit ~ Sales + Quantity + Discount + Category, data = sales_data)
summ(model1, scale = TRUE, digits = 4, col.rename = c("CategoryOffice Supplies" = "Office Supplies",
"CategoryTechnology" = "Technology")))
#Scaling Data for BIC Since JTools Scaled the Original Dataset
sales_data_scaled <- sales_data
sales_data_scaled$Sales <- scale(sales_data$Sales)
sales_data_scaled$Quantity <- scale(sales_data$Quantity)
sales_data_scaled$Discount <- scale(sales_data$Discount)
# Fit the best subset model
best_model <- regsubsets(Profit ~ ., data = sales_data_scaled, nbest = 1)
# Extract the summary of the model
best_model_summary <- summary(best_model)
# Extract metrics
bic_values <- best_model_summary$bic
# Find the best model indices based on each criterion
best_bic_index <- which.min(bic_values)
# Display the best models based on the chosen criteria)
print(coef(best_model, best_bic_index))
# create training and validation sets with 80% and 20% of the data
trainIndex <- createDataPartition(sales_data$Profit, p = 0.8, list = FALSE)
training <- sales_data[trainIndex, ]
testing <- sales_data[-trainIndex, ]
#linear regression model using the training set
model <- lm(Profit ~ Sales + Quantity + Discount + Category, data = training)
# predict on both training and testing sets
predict.train <- predict(model,data=training)
predict.test <- predict(model, newdata = testing)
# calculate RMSE on both sets
RMSE.train <- sqrt(mean((predict.train - training$Profit)^2))
RMSE.test <- sqrt(mean((predict.test - testing$Profit)^2))
# print RMSEs
print(paste0("Training RMSE: ", RMSE.train))
print(paste0("Testing RMSE: ", RMSE.test))
#Residual Plot of Actual Vs Predicted Profit Values
actual_values <- sales_data$Profit
predicted_values <- fitted(model)
residuals <- residuals(model)
ggplot(data.frame(predicted = predicted_values, residuals = residuals),
aes(x = predicted, y = residuals)) +
geom_point(color = "#948") +
geom_hline(yintercept = 0, color = "black", linetype = "dashed") +
labs(x = "Predicted Profit Values", y = "Residuals", title = "Residual Plot") +
theme_minimal()
#DotWhisker Plot for Categorical Variables
#Getting all coefficients including intercept
coef_data <- tidy(model1) %>%
mutate(term = case_when(
term == "(Intercept)" ~ "Furniture (Intercept)",
TRUE ~ term
))
#Plot
dwplot(coef_data,
vline = geom_vline(xintercept = 0, colour = "grey50", linetype = 2)) +
labs(title = "Dot Whisker Plot of Model Coefficients",
subtitle = "Profit ~ Sales + Quantity + Discount + Category",
x = "Coefficient Estimate",
y = "Variables") +
theme_minimal() +
theme(plot.title = element_text(face = "bold"),
legend.position = "none")
#Modeling the Data
model1 <- lm(Profit ~ Sales + Quantity + Discount + Category, data = sales_data)
summ(model1, scale = TRUE, digits = 4, col.rename = c("CategoryOffice Supplies" = "Office Supplies","CategoryTechnology" = "Technology"))
#Scaling Data for BIC Since JTools Scaled the Original Dataset
sales_data_scaled <- sales_data
sales_data_scaled$Sales <- scale(sales_data$Sales)
sales_data_scaled$Quantity <- scale(sales_data$Quantity)
sales_data_scaled$Discount <- scale(sales_data$Discount)
# Fit the best subset model
best_model <- regsubsets(Profit ~ ., data = sales_data_scaled, nbest = 1)
# Extract the summary of the model
best_model_summary <- summary(best_model)
# Extract metrics
bic_values <- best_model_summary$bic
# Find the best model indices based on each criterion
best_bic_index <- which.min(bic_values)
# Display the best models based on the chosen criteria)
print(coef(best_model, best_bic_index))
# create training and validation sets with 80% and 20% of the data
trainIndex <- createDataPartition(sales_data$Profit, p = 0.8, list = FALSE)
training <- sales_data[trainIndex, ]
testing <- sales_data[-trainIndex, ]
#linear regression model using the training set
model <- lm(Profit ~ Sales + Quantity + Discount + Category, data = training)
# predict on both training and testing sets
predict.train <- predict(model,data=training)
predict.test <- predict(model, newdata = testing)
# calculate RMSE on both sets
RMSE.train <- sqrt(mean((predict.train - training$Profit)^2))
RMSE.test <- sqrt(mean((predict.test - testing$Profit)^2))
# print RMSEs
print(paste0("Training RMSE: ", RMSE.train))
print(paste0("Testing RMSE: ", RMSE.test))
#Residual Plot of Actual Vs Predicted Profit Values
actual_values <- sales_data$Profit
predicted_values <- fitted(model)
residuals <- residuals(model)
ggplot(data.frame(predicted = predicted_values, residuals = residuals),
aes(x = predicted, y = residuals)) +
geom_point(color = "#948") +
geom_hline(yintercept = 0, color = "black", linetype = "dashed") +
labs(x = "Predicted Profit Values", y = "Residuals", title = "Residual Plot") +
theme_minimal()
#DotWhisker Plot for Categorical Variables
#Getting all coefficients including intercept
coef_data <- tidy(model1) %>%
mutate(term = case_when(
term == "(Intercept)" ~ "Furniture (Intercept)",
TRUE ~ term
))
#Plot
dwplot(coef_data,
vline = geom_vline(xintercept = 0, colour = "grey50", linetype = 2)) +
labs(title = "Dot Whisker Plot of Model Coefficients",
subtitle = "Profit ~ Sales + Quantity + Discount + Category",
x = "Coefficient Estimate",
y = "Variables") +
theme_minimal() +
theme(plot.title = element_text(face = "bold"),
legend.position = "none")
summ(model1, scale = TRUE, digits = 4, col.rename = c("CategoryOffice Supplies" = "Office Supplies","CategoryTechnology" = "Technology"))
summ(model1, scale = TRUE, digits = 4)
#DotWhisker Plot for Categorical Variables
#Getting all coefficients including intercept
coef_data <- tidy(model1) %>%
mutate(term = case_when(
term == "(Intercept)" ~ "Furniture (Intercept)",
TRUE ~ term
))
#Plot
dwplot(coef_data,
vline = geom_vline(xintercept = 0, colour = "grey50", linetype = 2)) +
labs(title = "Dot Whisker Plot of Model Coefficients",
subtitle = "Profit ~ Sales + Quantity + Discount + Category",
x = "Coefficient Estimate",
y = "Variables") +
theme_minimal() +
theme(plot.title = element_text(face = "bold"),
legend.position = "none")
#DotWhisker Plot for Categorical Variables
#Getting all coefficients including intercept
coef_data <- tidy(model1) %>%
mutate(term = case_when(
term == "(Intercept)" ~ "Furniture (Intercept)"
term == "(CategoryOffice Supplies)" ~ "Office Supplies",
#Plot
dwplot(coef_data,
vline = geom_vline(xintercept = 0, colour = "grey50", linetype = 2)) +
labs(title = "Dot Whisker Plot of Model Coefficients",
subtitle = "Profit ~ Sales + Quantity + Discount + Category",
x = "Coefficient Estimate",
y = "Variables") +
theme_minimal() +
theme(plot.title = element_text(face = "bold"),
legend.position = "none")
#DotWhisker Plot for Categorical Variables
#Getting all coefficients including intercept
coef_data <- tidy(model1) %>%
mutate(term = case_when(
term == "(Intercept)" ~ "Furniture (Intercept)"
term == "(CategoryOffice Supplies)" ~ "Office Supplies",
#Plot
dwplot(coef_data,
vline = geom_vline(xintercept = 0, colour = "grey50", linetype = 2)) +
labs(title = "Dot Whisker Plot of Model Coefficients",
subtitle = "Profit ~ Sales + Quantity + Discount + Category",
x = "Coefficient Estimate",
y = "Variables") +
theme_minimal() +
theme(plot.title = element_text(face = "bold"),
legend.position = "none")
#DotWhisker Plot for Categorical Variables
#Getting all coefficients including intercept
coef_data <- tidy(model1) %>%
mutate(term = case_when(
term == "Intercept" ~ "Furniture (Intercept)"
term == "CategoryOffice Supplies" ~ "Office Supplies",
#Plot
dwplot(coef_data,
vline = geom_vline(xintercept = 0, colour = "grey50", linetype = 2)) +
labs(title = "Dot Whisker Plot of Model Coefficients",
subtitle = "Profit ~ Sales + Quantity + Discount + Category",
x = "Coefficient Estimate",
y = "Variables") +
theme_minimal() +
theme(plot.title = element_text(face = "bold"),
legend.position = "none")
#DotWhisker Plot for Categorical Variables
#Getting all coefficients including intercept
coef_data <- tidy(model1) %>%
mutate(term = case_when(
term == "Intercept" ~ "Furniture (Intercept)"
term == "CategoryOffice Supplies" ~ "Office Supplies",
#Plot
dwplot(coef_data,
vline = geom_vline(xintercept = 0, colour = "grey50", linetype = 2)) +
labs(title = "Dot Whisker Plot of Model Coefficients",
subtitle = "Profit ~ Sales + Quantity + Discount + Category",
x = "Coefficient Estimate",
y = "Variables") + theme_minimal() + theme(plot.title = element_text(face = "bold"),
legend.position = "none")
#DotWhisker Plot for Categorical Variables
#Getting all coefficients including intercept
coef_data <- tidy(model1) %>%
relabel_predictors(c(
"Intercept" = "Furniture (Intercept)",
"CategoryOffice Supplies" = "Office Supplies",
"CategoryTechnology" = "Technology"
))
#Plot
dwplot(coef_data,
vline = geom_vline(xintercept = 0, colour = "grey50", linetype = 2)) +
labs(title = "Dot Whisker Plot of Model Coefficients",
subtitle = "Profit ~ Sales + Quantity + Discount + Category",
x = "Coefficient Estimate",
y = "Variables") + theme_minimal() + theme(plot.title = element_text(face = "bold"),
legend.position = "none")
#DotWhisker Plot for Categorical Variables
#Getting all coefficients including intercept
coef_data <- tidy(model1) %>%
mutate(term = case_when(
term == "Intercept" ~ "Furniture (Intercept)"
term == "CategoryOffice Supplies" ~ "Office Supplies",
#DotWhisker Plot for Categorical Variables
#Getting all coefficients including intercept
coef_data <- tidy(model1) %>%
mutate(term = case_when(
term == "Intercept" ~ "Furniture (Intercept)"
term == "CategoryOffice Supplies" ~ "Office Supplies",
#Plot
dwplot(coef_data,
vline = geom_vline(xintercept = 0, colour = "grey50", linetype = 2)) +
labs(title = "Dot Whisker Plot of Model Coefficients",
subtitle = "Profit ~ Sales + Quantity + Discount + Category",
x = "Coefficient Estimate",
y = "Variables") + theme_minimal() + theme(plot.title = element_text(face = "bold"),
legend.position = "none")
#DotWhisker Plot for Categorical Variables
#Getting all coefficients including intercept
coef_data <- tidy(model1) %>%
mutate(term = case_when(
term == "Intercept" ~ "Furniture (Intercept)"
term == "CategoryOffice Supplies" ~ "Office Supplies",
#Plot
dwplot(coef_data,
vline = geom_vline(xintercept = 0, colour = "grey50", linetype = 2)) +
labs(title = "Dot Whisker Plot of Model Coefficients",
subtitle = "Profit ~ Sales + Quantity + Discount + Category",
x = "Coefficient Estimate",
y = "Variables") + theme_minimal() + theme(plot.title = element_text(face = "bold"),
legend.position = "none")
#DotWhisker Plot for Categorical Variables
#Getting all coefficients including intercept
coef_data <- tidy(model1) %>%
mutate(term = case_when(
term == "(Intercept)" ~ "Furniture (Intercept)"
term == "CategoryOffice Supplies" ~ "Office Supplies",
#Plot
dwplot(coef_data,
vline = geom_vline(xintercept = 0, colour = "grey50", linetype = 2)) +
labs(title = "Dot Whisker Plot of Model Coefficients",
subtitle = "Profit ~ Sales + Quantity + Discount + Category",
x = "Coefficient Estimate",
y = "Variables") + theme_minimal() + theme(plot.title = element_text(face = "bold"),
legend.position = "none")
#DotWhisker Plot for Categorical Variables
#Getting all coefficients including intercept
coef_data <- tidy(model1) %>%
mutate(term = case_when(
term == "Intercept" ~ "Furniture (Intercept)"
term == "CategoryOffice Supplies" ~ "Office Supplies",
#Plot
dwplot(coef_data,
vline = geom_vline(xintercept = 0, colour = "grey50", linetype = 2)) +
labs(title = "Dot Whisker Plot of Model Coefficients",
subtitle = "Profit ~ Sales + Quantity + Discount + Category",
x = "Coefficient Estimate",
y = "Variables") + theme_minimal() + theme(plot.title = element_text(face = "bold"),
legend.position = "none")
#DotWhisker Plot for Categorical Variables
#Getting all coefficients including intercept
coef_data <- tidy(model1) %>%
mutate(term = case_when(
term == "Intercept" ~ "Furniture (Intercept)",
term == "CategoryOffice Supplies" ~ "Office Supplies",
term == "CategoryTechnology" ~ "Technology",
TRUE ~ term))
#Plot
dwplot(coef_data,
vline = geom_vline(xintercept = 0, colour = "grey50", linetype = 2)) +
labs(title = "Dot Whisker Plot of Model Coefficients",
subtitle = "Profit ~ Sales + Quantity + Discount + Category",
x = "Coefficient Estimate",
y = "Variables") + theme_minimal() + theme(plot.title = element_text(face = "bold"),
legend.position = "none")
#DotWhisker Plot for Categorical Variables
#Getting all coefficients including intercept
coef_data <- tidy(model1) %>%
mutate(term = case_when(
term == "Intercept" ~ "Furniture (Intercept)",
term == "CategoryOffice Supplies" ~ "Office Supplies",
term == "CategoryTechnology" ~ "Technology",
TRUE ~ term))
#Plot
dwplot(coef_data,
vline = geom_vline(xintercept = 0, colour = "grey50", linetype = 2)) +
labs(title = "Dot Whisker Plot of Model Coefficients",
subtitle = "Profit ~ Sales + Quantity + Discount + Category",
x = "Coefficient Estimate",
y = "Variables") + theme_minimal() + theme(plot.title = element_text(face = "bold"),
legend.position = "none")
#DotWhisker Plot for Categorical Variables
#Getting all coefficients including intercept
coef_data <- tidy(model1) %>%
mutate(term = case_when(
term == "(Intercept)" ~ "Furniture (Intercept)",
term == "CategoryOffice Supplies" ~ "Office Supplies",
term == "CategoryTechnology" ~ "Technology",
TRUE ~ term))
#Plot
dwplot(coef_data,
vline = geom_vline(xintercept = 0, colour = "grey50", linetype = 2)) +
labs(title = "Dot Whisker Plot of Model Coefficients",
subtitle = "Profit ~ Sales + Quantity + Discount + Category",
x = "Coefficient Estimate",
y = "Variables") + theme_minimal() + theme(plot.title = element_text(face = "bold"),
legend.position = "none")
# Standardize the variables
standardized_data <- as.data.frame(scale(sales_data[, c("Profit", "Sales", "Quantity", "Discount")]))
# Standardize the variables
standardized_data <- as.data.frame(scale(sales_data[, c("Profit", "Sales", "Quantity", "Discount")]))
standardized_data$Category <- sales_data$Category
# Fit the model with standardized variables
model_std <- lm(Profit ~ Sales + Quantity + Discount + Category, data = standardized_data)
coef_data <- tidy(model1) %>%
mutate(term = case_when(
term == "(Intercept)" ~ "Furniture (Intercept)",
term == "CategoryOffice Supplies" ~ "Office Supplies",
term == "CategoryTechnology" ~ "Technology",
TRUE ~ term))
#Plot
dwplot(coef_data,
vline = geom_vline(xintercept = 0, colour = "grey50", linetype = 2)) +
labs(title = "Dot Whisker Plot of Model Coefficients",
subtitle = "Profit ~ Sales + Quantity + Discount + Category",
x = "Coefficient Estimate",
y = "Variables") + theme_minimal() + theme(plot.title = element_text(face = "bold"),
legend.position = "none")
# Standardize the variables
standardized_data <- as.data.frame(scale(sales_data[, c("Profit", "Sales", "Quantity", "Discount")]))
standardized_data$Category <- sales_data$Category
# Fit the model with standardized variables
model_std <- lm(Profit ~ Sales + Quantity + Discount + Category, data = standardized_data)
coef_data <- tidy(model_std) %>%
mutate(term = case_when(
term == "(Intercept)" ~ "Furniture (Intercept)",
term == "CategoryOffice Supplies" ~ "Office Supplies",
term == "CategoryTechnology" ~ "Technology",
TRUE ~ term))
#Plot
dwplot(coef_data,
vline = geom_vline(xintercept = 0, colour = "grey50", linetype = 2)) +
labs(title = "Dot Whisker Plot of Model Coefficients",
subtitle = "Profit ~ Sales + Quantity + Discount + Category",
x = "Coefficient Estimate",
y = "Variables") + theme_minimal() + theme(plot.title = element_text(face = "bold"),
legend.position = "none")
#scatter
plot(sales_data$Sales~sales_data$Profit)
library(ggplot2)
ggplot(sales_data, aes(x = Sales, y = Profit, color = Category)) + geom_point() +
labs(x ="Sales", y = "Profit", title = "Sales vs. Profit by Category")
sale <- aggregate(Sales ~ Region, data = sales_data, FUN = sum)
sale <- aggregate(Sales ~ Region, data = sales_data, FUN = sum)
ggplot(sale, aes(x = "", y = Sales, fill = Region)) +
geom_bar(width = 1, stat = "identity", color = "white") +
coord_polar("y", start = 0)+
theme_void()
install.packages("shiny")
source("~/.active-rstudio-document", echo=TRUE)
source("~/Desktop/MGMT 173/SalesDataMining.R", echo=TRUE)
source("~/Desktop/MDDDMSales.R", echo=TRUE)
